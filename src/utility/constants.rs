use std::env;

use once_cell::sync::Lazy;

pub static BOT_TOKEN: Lazy<String> = Lazy::new(|| env::var("BOT_TOKEN").unwrap());
pub static DATABASE_URL: Lazy<String> = Lazy::new(|| env::var("DATABASE_URL").unwrap());
pub static FLUCTUATING_XP: Lazy<Vec<(i64, i64, i64)>> = Lazy::new(|| {
    vec![
        (1, 0, 4),
        (2, 4, 9),
        (3, 13, 19),
        (4, 32, 33),
        (5, 65, 47),
        (6, 112, 66),
        (7, 178, 98),
        (8, 276, 117),
        (9, 393, 147),
        (10, 540, 205),
        (11, 745, 222),
        (12, 967, 263),
        (13, 1_230, 361),
        (14, 1_591, 366),
        (15, 1_957, 500),
        (16, 2_457, 589),
        (17, 3_046, 686),
        (18, 3_732, 794),
        (19, 4_526, 914),
        (20, 5_440, 1_042),
        (21, 6_482, 1_184),
        (22, 7_666, 1_337),
        (23, 9_003, 1_503),
        (24, 10_506, 1_681),
        (25, 12_187, 1_873),
        (26, 14_060, 2_080),
        (27, 16_140, 2_299),
        (28, 18_439, 2_535),
        (29, 20_974, 2_786),
        (30, 23_760, 3_051),
        (31, 26_811, 3_335),
        (32, 30_146, 3_634),
        (33, 33_780, 3_951),
        (34, 37_731, 4_286),
        (35, 42_017, 4_639),
        (36, 46_656, 3_997),
        (37, 50_653, 5_316),
        (38, 55_969, 4_536),
        (39, 60_505, 6_055),
        (40, 66_560, 5_117),
        (41, 71_677, 6_856),
        (42, 78_533, 5_744),
        (43, 84_277, 7_721),
        (44, 91_998, 6_417),
        (45, 98_415, 8_654),
        (46, 107_069, 7_136),
        (47, 114_205, 9_658),
        (48, 123_863, 7_903),
        (49, 131_766, 10_734),
        (50, 142_500, 8_722),
        (51, 151_222, 11_883),
        (52, 163_105, 9_592),
        (53, 172_697, 13_110),
        (54, 185_807, 10_515),
        (55, 196_322, 14_417),
        (56, 210_739, 11_492),
        (57, 222_231, 15_805),
        (58, 238_036, 12_526),
        (59, 250_562, 17_278),
        (60, 267_840, 13_616),
        (61, 281_456, 18_837),
        (62, 300_293, 14_766),
        (63, 315_059, 20_485),
        (64, 335_544, 15_976),
        (65, 351_520, 22_224),
        (66, 373_744, 17_247),
        (67, 390_991, 24_059),
        (68, 415_050, 18_581),
        (69, 433_631, 25_989),
        (70, 459_620, 19_980),
        (71, 479_600, 28_017),
        (72, 507_617, 21_446),
        (73, 529_063, 30_146),
        (74, 559_209, 22_9780),
        (75, 582_187, 32_379),
        (76, 614_566, 24_580),
        (77, 639_146, 34_717),
        (78, 673_863, 26_252),
        (79, 700_115, 37_165),
        (80, 737_280, 27_995),
        (81, 765_275, 39_722),
        (82, 804_997, 29_812),
        (83, 834_809, 42_392),
        (84, 877_201, 31_704),
        (85, 908_905, 45_179),
        (86, 954_084, 33_670),
        (87, 987_754, 48_083),
        (88, 1_035_837, 35_715),
        (89, 1_071_552, 51_108),
        (90, 1_122_660, 37_839),
        (91, 1_160_499, 54_254),
        (92, 1_214_753, 40_043),
        (93, 1_254_796, 57_526),
        (94, 1_312_322, 42_330),
        (95, 1_354_652, 60_925),
        (96, 1_415_577, 44_699),
        (97, 1_460_276, 64_455),
        (98, 1_524_731, 47_153),
        (99, 1_571_884, 68_116),
        (100, 1_640_000, 0),
    ]
});
